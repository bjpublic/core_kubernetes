# Jenkinsfile
pipeline {
    agent {
        kubernetes {
            yaml '''
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: git
    image: alpine/git
    tty: true 
    command: ["cat"]
    env:
    - name: PROJECT_URL
      value: https://github.com/bjpublic/core_kubernetes.git 
  - name: docker
    image: docker
    tty: true 
    command: ["cat"]
    env:
    - name: PROJECT_NAME
      value: jenkins-pipeline-sample
    volumeMounts:
    - mountPath: /var/run/docker.sock
      name: docker-socket
  volumes:
  - name: docker-socket
    hostPath:
      path: /var/run/docker.sock
'''
        }
    }
    stages {
      stage('Checkout') {
        steps {
          container('git') {
            // 소스코드 checkout  
            sh "git clone \$PROJECT_URL"
          }
        }
      } 
      stage('Build') {
        steps {
          container('docker') {
            // 도커 빌드
            sh """
            cd \$PROJECT_NAME/pipeline-sample
            docker build -t \$PROJECT_NAME .
            """
          }
        }
      }
      stage('Test') {
        steps {
          container('docker') {
            // 이미지 테스트
            sh "docker run --entrypoint /test \$PROJECT_NAME"
          }
        }
      }
      stage('Push') {
        steps {
          container('docker') {
            // 도커헙 계정 정보 가져오기 
            withCredentials([[$class: 'UsernamePasswordMultiBinding',
              credentialsId: 'dockerhub',
              usernameVariable: 'DOCKERHUB_USER',
              passwordVariable: 'DOCKERHUB_PASSWORD']]) {
              // 이미지 패키징 & 업로드
              sh """
                docker login -u ${DOCKERHUB_USER} -p ${DOCKERHUB_PASSWORD}
                docker tag \$PROJECT_NAME ${DOCKERHUB_USER}/\$PROJECT_NAME
                docker push ${DOCKERHUB_USER}/\$PROJECT_NAME
              """
            }
          }
        }
      }
    }
}